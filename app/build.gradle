apply plugin: "com.android.application"

apply plugin: "kotlin-android"

apply plugin: "kotlin-android-extensions"

apply plugin: "kotlin-kapt"

apply plugin: "androidx.navigation.safeargs"

androidExtensions {
    experimental = true
}

ext.minimumSdkVersion = 23

private Integer generateVersionCode(int major, int minor, int patch) {
    return ext.minimumSdkVersion * 10000000 + major * 10000 + minor * 100 + patch
}

private static String generateVersionName(int major, int minor, int patch) {
    return "${major}.${minor}.${patch}"
}

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.boros.android.sample"
        minSdkVersion minimumSdkVersion
        targetSdkVersion 29
        versionCode generateVersionCode(0, 0, 1)
        versionName generateVersionName(0, 0, 1)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        buildConfigField "String", "CLIENT_ID", "\"android\""
        buildConfigField "String", "CLIENT_SECRET", getApiSecret()
        buildConfigField "String", "DATABASE_NAME", getDatabaseName()
        buildConfigField "String", "BASE_URL", getBaseUrl()
    }
    signingConfigs {
        signingConfig {
            Properties properties = getLocalProperties()
            keyAlias properties.getProperty("sampleKeyAlias")
            keyPassword properties.getProperty("sampleKeyPassword")
            storeFile file("${projectDir.path}/keys/basic")
            storePassword properties.getProperty("sampleKeyPassword")
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            signingConfig signingConfigs.signingConfig
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            minifyEnabled false
            shrinkResources false
            debuggable true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    flavorDimensions "default"
    productFlavors {
        basic {
            applicationIdSuffix ".demo"
            versionCode generateVersionCode(0, 0, 1)
            versionName generateVersionName(0, 0, 1)
            signingConfig signingConfigs.signingConfig
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.google.android.material:material:1.1.0"
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation "androidx.core:core-ktx:1.2.0"
    implementation "androidx.work:work-runtime:$workVersion"

    // Testing
    testImplementation "junit:junit:4.12"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    testImplementation "org.mockito:mockito-core:3.1.0"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "androidx.arch.core:core-testing:$archCoreVersion"
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"

    // Architecture Components
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"

    // Navigation
    implementation "android.arch.navigation:navigation-fragment:1.0.0"
    implementation "android.arch.navigation:navigation-ui:1.0.0"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    // DI
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    // Network
    implementation "com.squareup.retrofit2:retrofit:2.7.1"
    implementation "com.squareup.retrofit2:converter-gson:2.7.1"
    implementation "com.squareup.okhttp3:logging-interceptor:4.2.2"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    // EventBus
    implementation "org.greenrobot:eventbus:3.2.0"

    // Facebook
    implementation "com.facebook.android:facebook-login:$facebookVersion"

    // Google Play Services
    implementation "com.google.android.gms:play-services-auth:$playServicesAuthVersion"

    // Else
    implementation "jp.wasabeef:recyclerview-animators:3.0.0"
    implementation "de.hdodenhof:circleimageview:2.2.0"
    implementation "org.jdeferred:jdeferred-core:1.2.6"

    // Leak canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:1.6.2"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:1.6.2"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:1.6.2"
}

String getApiSecret() {
    return "\"" + getLocalProperties().getProperty("apiSecret") + "\""
}

String getDatabaseName() {
    return "\"" + getLocalProperties().getProperty("databaseName") + "\""
}

String getBaseUrl() {
    return "\"" + getLocalProperties().getProperty("baseUrl") + "\""
}

Properties getLocalProperties() {
    Properties properties = new Properties()
    def localPropertiesFile = project.rootProject.file("local.properties")
    if (localPropertiesFile.canRead()) {
        properties.load(localPropertiesFile.newDataInputStream())
    }
    return properties
}
